Используя базовую реализацию односвязного списка целых чисел (integer_list.hpp, integer_list.cpp), создайте собственную структуру IntegerReverseList, 
где узлы хранят связь не со следующим, а с предыдущим элементом:
как и обычный связный список, такой список хранить указатели на первый и последний узлы;
любая навигация по списку, включая функцию уничтожения, должна осуществляться от последнего элемента к первому;
требуется обновить реализацию всех основных функций, при этом одни функции будут работать быстрее, чем в классическом варианте,
а другие, наоборот, медленнее.

Продемонстрируйте работоспособность решения при помощи тестовой программы.
Например, должен работать подобный тестовый код:

		// создаем и инициализируем список
		IntegerReverseList l;
		IntegerReverseListInit( l );

		// добавляем данные в список
		IntegerReverseListPushBack( l, 1 );
		IntegerReverseListPushBack( l, 2 );
		IntegerReverseListPushBack( l, 3 );

		// проверяем расположение данных в списке
		assert( l.m_pFirst->m_value == 1 );
		assert( l.m_pLast->m_value == 3 );
		assert( l.m_pLast->m_pPrev->m_value == 2 );

		// уничтожаем список
		IntegerReverseListDestroy( l );

В результате должно получиться 3 файла:
integer_reverse_list.hpp - заголовочный файл структуры данных.
integer_reverse_list.cpp - файл реализации операций структуры данных.
test.cpp - файл с тестовой программой.
